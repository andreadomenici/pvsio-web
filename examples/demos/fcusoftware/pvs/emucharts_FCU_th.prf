(emucharts_FCU_th
 (init_TCC1 0
  (init_TCC1-1 nil 3679632140 ("" (subtype-tcc) nil nil)
   ((MAX_DECIMAL_DIGITS const-decl "int" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC2 0
  (init_TCC2-1 nil 3679635266 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (STD_INHG const-decl "double" FCUDataEntry nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC3 0
  (init_TCC3-1 nil 3679649464 ("" (subtype-tcc) nil nil)
   ((MAX_INTEGER_DIGITS const-decl "int" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (init_TCC4 0
  (init_TCC4-1 nil 3679649464 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MIN_inHg const-decl "double" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (MAX_inHg const-decl "double" constants nil)
    (STD_INHG const-decl "double" FCUDataEntry nil))
   nil))
 (click_hPa_TCC1 0
  (click_hPa_TCC1-1 nil 3679578064
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue")
        (("1" (grind) nil nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue")
        (("2" (grind)
          (("2" (typepred "DOUBLE_MAX")
            (("2" (typepred "FLOAT_MAX")
              (("2" (typepred "ULONG_MAX")
                (("2" (typepred "LONG_MAX")
                  (("2" (typepred "INT_MAX")
                    (("2" (typepred "SHRT_MAX")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "data_entry(st!1)`programmedValue")
        (("3" (grind) nil nil)) nil)
       ("4" (typepred "data_entry(st!1)`programmedValue")
        (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_hPa const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (leave_state const-decl "State" emucharts_FCU_th nil))
   nil))
 (click_hPa_TCC2 0
  (click_hPa_TCC2-1 nil 3679578064
   ("" (skosimp*)
    (("" (split 2)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (assert)
          (("1" (hide -1 -2)
            (("1" (expand "MIN_inHg") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (assert)
          (("2" (expand "MAX_inHg")
            (("2" (assert)
              (("2" (typepred "DOUBLE_MAX")
                (("2" (typepred "FLOAT_MAX")
                  (("2" (typepred "ULONG_MAX")
                    (("2" (typepred "LONG_MAX")
                      (("2" (typepred "INT_MAX")
                        (("2" (typepred "SHRT_MAX")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "data_entry(st!1)`programmedValue ")
        (("3" (assert)
          (("3" (expand "MIN_inHg") (("3" (propax) nil nil)) nil))
          nil))
        nil)
       ("4" (typepred "data_entry(st!1)`programmedValue ")
        (("4" (expand "MAX_inHg") (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_hPa const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (click_hPa_TCC3 0
  (click_hPa_TCC3-1 nil 3679632140
   ("" (skosimp*)
    (("" (split 2)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (expand "MIN_inHg") (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (expand "MAX_inHg")
          (("2" (assert)
            (("2" (typepred "DOUBLE_MAX")
              (("2" (typepred "FLOAT_MAX")
                (("2" (typepred "ULONG_MAX")
                  (("2" (typepred "LONG_MAX")
                    (("2" (typepred "INT_MAX")
                      (("2" (typepred "SHRT_MAX")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "data_entry(st!1)`programmedValue ")
        (("3" (assert)
          (("3" (expand "MIN_inHg")
            (("3" (expand "MIN_hPa") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (expand "MAX_hPa")
        (("4" (assert)
          (("4" (typepred "data_entry(st!1)`programmedValue ")
            (("4" (expand "MIN_inHg")
              (("4" (assert)
                (("4" (expand "MAX_hPa")
                  (("4" (expand "MIN_hPa")
                    (("4" (expand "MAX_inHg") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_hPa const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_hPa_TCC4 0
  (click_hPa_TCC4-1 nil 3679632140
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue")
        (("1" (grind) nil nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue")
        (("2" (typepred "DOUBLE_MAX")
          (("2" (typepred "FLOAT_MAX")
            (("2" (typepred "ULONG_MAX")
              (("2" (typepred "LONG_MAX")
                (("2" (typepred "INT_MAX")
                  (("2" (typepred "SHRT_MAX") (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "data_entry(st!1)`programmedValue")
        (("3" (grind) nil nil)) nil)
       ("4" (typepred "data_entry(st!1)`programmedValue")
        (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_hPa const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (click_hPa_TCC5 0
  (click_hPa_TCC5-1 nil 3679632140
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((leave_state const-decl "State" emucharts_FCU_th nil)
    (STD_HPA const-decl "double" FCUDataEntry nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_hPa_TCC6 0
  (click_hPa_TCC6-1 nil 3679632140
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((leave_state const-decl "State" emucharts_FCU_th nil)
    (STD_HPA const-decl "double" FCUDataEntry nil)
    (MAX_hPa const-decl "double" constants nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MIN_hPa const-decl "double" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_hPa_TCC7 0
  (click_hPa_TCC7-1 nil 3679632140 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_hPa const-decl "bool" emucharts_FCU_th nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (click_inHg_TCC1 0
  (click_inHg_TCC1-1 nil 3679578064
   ("" (skosimp*)
    (("" (split 1)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (expand "MIN_inHg")
          (("1" (assert)
            (("1" (expand "MIN_hPa") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (typepred "DOUBLE_MAX")
          (("2" (typepred "FLOAT_MAX")
            (("2" (typepred "ULONG_MAX")
              (("2" (typepred "LONG_MAX")
                (("2" (typepred "INT_MAX")
                  (("2" (typepred "SHRT_MAX") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_inHg const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_inHg_TCC2 0
  (click_inHg_TCC2-1 nil 3679597863
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (expand "MIN_inHg") (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (typepred "DOUBLE_MAX")
          (("2" (typepred "FLOAT_MAX")
            (("2" (typepred "ULONG_MAX")
              (("2" (typepred "LONG_MAX")
                (("2" (typepred "INT_MAX")
                  (("2" (typepred "SHRT_MAX") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "data_entry(st!1)`programmedValue ")
        (("3" (expand "MIN_inHg")
          (("3" (assert)
            (("3" (expand "MIN_hPa") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (typepred "data_entry(st!1)`programmedValue ")
        (("4" (expand "MAX_inHg")
          (("4" (assert)
            (("4" (expand "MAX_hPa") (("4" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_inHg const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_inHg_TCC3 0
  (click_inHg_TCC3-1 nil 3679632140
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (expand "MIN_inHg")
          (("1" (expand "MIN_hPa") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (grind) nil nil)) nil)
       ("3" (typepred "data_entry(st!1)`programmedValue ")
        (("3" (grind) nil nil)) nil)
       ("4" (typepred "data_entry(st!1)`programmedValue ")
        (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_inHg const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_inHg_TCC4 0
  (click_inHg_TCC4-1 nil 3679632140
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue")
        (("1" (grind) nil nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue")
        (("2" (grind) nil nil)) nil)
       ("3" (typepred "data_entry(st!1)`programmedValue")
        (("3" (grind) nil nil)) nil)
       ("4" (typepred "data_entry(st!1)`programmedValue")
        (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_inHg const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (click_inHg_TCC5 0
  (click_inHg_TCC5-1 nil 3679632140
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (grind) nil nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (grind) nil nil)) nil)
       ("3" (typepred "data_entry(st!1)`programmedValue ")
        (("3" (grind) nil nil)) nil)
       ("4" (typepred "data_entry(st!1)`programmedValue ")
        (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_inHg const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (click_std_button_TCC1 0
  (click_std_button_TCC1-1 nil 3679597863 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_std_button const-decl "bool" emucharts_FCU_th nil)
    (leave_state const-decl "State" emucharts_FCU_th nil)
    (STD_HPA const-decl "double" FCUDataEntry nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (click_std_button_TCC2 0
  (click_std_button_TCC2-1 nil 3679597863 ("" (subtype-tcc) nil nil)
   ((leave_state const-decl "State" emucharts_FCU_th nil)
    (STD_HPA const-decl "double" FCUDataEntry nil))
   nil))
 (click_std_button_TCC3 0
  (click_std_button_TCC3-1 nil 3679597863
   ("" (cond-disjoint-tcc) nil nil)
   ((leave_state const-decl "State" emucharts_FCU_th nil)
    (STD_INHG const-decl "double" FCUDataEntry nil)
    (MIN_inHg const-decl "double" constants nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil))
   nil))
 (click_std_button_TCC4 0
  (click_std_button_TCC4-1 nil 3679635266
   ("" (skosimp*)
    (("" (split +)
      (("1" (typepred "data_entry(st!1)`programmedValue ")
        (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
       ("2" (typepred "data_entry(st!1)`programmedValue ")
        (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_std_button const-decl "bool" emucharts_FCU_th nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SHRT_MAX const-decl "{s: int | s = 32767}" limits nil)
    (INT_MAX const-decl "{i: int | i >= SHRT_MAX}" limits nil)
    (LONG_MAX const-decl "{li: int | li >= INT_MAX}" limits nil)
    (ULONG_MAX const-decl "{ul: int | ul >= LONG_MAX}" limits nil)
    (FLOAT_MAX const-decl "{x: nonneg_real | x >= ULONG_MAX}" limits
     nil)
    (DOUBLE_MAX const-decl "{x: nonneg_real | x >= FLOAT_MAX}" limits
     nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (UnitsType type-decl nil FCUDataEntry nil)
    (inHg? adt-recognizer-decl "[UnitsType -> boolean]" FCUDataEntry
     nil)
    (inHg adt-constructor-decl "(inHg?)" FCUDataEntry nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (double type-eq-decl nil limits nil)
    (MIN_inHg const-decl "double" constants nil)
    (<= const-decl "bool" reals nil)
    (MAX_inHg const-decl "double" constants nil)
    (MIN_hPa const-decl "double" constants nil)
    (MAX_hPa const-decl "double" constants nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (click_std_button_TCC5 0
  (click_std_button_TCC5-1 nil 3679635266
   ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_click_std_button const-decl "bool" emucharts_FCU_th nil))
   nil))
 (tick_TCC1 0
  (tick_TCC1-1 nil 3679578064 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MachineState type-decl nil emucharts_FCU_th nil)
    (state type-eq-decl nil FCUDataEntry nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State type-eq-decl nil emucharts_FCU_th nil)
    (per_tick const-decl "bool" emucharts_FCU_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)))

